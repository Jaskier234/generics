{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for Func.
--   Generated by the BNF converter.

module Func.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, dropWhile, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Func.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i = \case
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    [";"]        -> showChar ';'
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i     = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt     _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Func.Abs.Ident where
  prt _ (Func.Abs.Ident i) = doc $ showString i
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString " "), prt 0 xs]

instance Print Func.Abs.UIdent where
  prt _ (Func.Abs.UIdent i) = doc $ showString i

instance Print (Func.Abs.Program' a) where
  prt i = \case
    Func.Abs.Prog _ declarations -> prPrec i 0 (concatD [prt 0 declarations])

instance Print (Func.Abs.Declaration' a) where
  prt i = \case
    Func.Abs.DeclFun _ funcdecl -> prPrec i 0 (concatD [prt 0 funcdecl])
    Func.Abs.DeclType _ typedecl -> prPrec i 0 (concatD [prt 0 typedecl])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]

instance Print [Func.Abs.Declaration' a] where
  prt = prtList

instance Print (Func.Abs.FuncDecl' a) where
  prt i = \case
    Func.Abs.FDecl _ type_ id_ args exp -> prPrec i 0 (concatD [doc (showString "type"), prt 0 type_, doc (showString "def"), prt 0 id_, prt 1 args, doc (showString "="), prt 0 exp])

instance Print (Func.Abs.Arg' a) where
  prt i = \case
    Func.Abs.AIdent _ id_ -> prPrec i 1 (concatD [prt 0 id_])
    Func.Abs.APattern _ uident args -> prPrec i 0 (concatD [prt 0 uident, prt 1 args])
    Func.Abs.AEmpList _ -> prPrec i 0 (concatD [doc (showString "[]")])
    Func.Abs.AList _ arg1 arg2 -> prPrec i 0 (concatD [prt 1 arg1, doc (showString ":"), prt 1 arg2])
  prtList 1 [] = concatD []
  prtList 1 (x:xs) = concatD [prt 1 x, doc (showString " "), prt 1 xs]

instance Print [Func.Abs.Arg' a] where
  prt = prtList

instance Print (Func.Abs.Type' a) where
  prt i = \case
    Func.Abs.TInt _ -> prPrec i 2 (concatD [doc (showString "Int")])
    Func.Abs.TBool _ -> prPrec i 2 (concatD [doc (showString "Bool")])
    Func.Abs.TVar _ id_ -> prPrec i 2 (concatD [prt 0 id_])
    Func.Abs.TList _ type_ -> prPrec i 2 (concatD [doc (showString "["), prt 0 type_, doc (showString "]")])
    Func.Abs.TData _ uident types -> prPrec i 1 (concatD [prt 0 uident, prt 2 types])
    Func.Abs.TFunc _ type_1 type_2 -> prPrec i 0 (concatD [prt 1 type_1, doc (showString "->"), prt 0 type_2])
  prtList 2 [] = concatD []
  prtList 2 (x:xs) = concatD [prt 2 x, doc (showString " "), prt 2 xs]

instance Print [Func.Abs.Type' a] where
  prt = prtList

instance Print (Func.Abs.TypeDecl' a) where
  prt i = \case
    Func.Abs.TDecl _ uident ids constructors -> prPrec i 0 (concatD [doc (showString "data"), prt 0 uident, prt 0 ids, doc (showString "="), prt 0 constructors])

instance Print (Func.Abs.Constructor' a) where
  prt i = \case
    Func.Abs.TCons _ uident types -> prPrec i 0 (concatD [prt 0 uident, prt 2 types])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print [Func.Abs.Constructor' a] where
  prt = prtList

instance Print [Func.Abs.Ident] where
  prt = prtList

instance Print (Func.Abs.Exp' a) where
  prt i = \case
    Func.Abs.ENum _ n -> prPrec i 10 (concatD [prt 0 n])
    Func.Abs.ETrue _ -> prPrec i 10 (concatD [doc (showString "True")])
    Func.Abs.EFalse _ -> prPrec i 10 (concatD [doc (showString "False")])
    Func.Abs.EVar _ id_ -> prPrec i 10 (concatD [prt 0 id_])
    Func.Abs.ECons _ uident -> prPrec i 10 (concatD [prt 0 uident])
    Func.Abs.ECall _ exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, prt 10 exp2])
    Func.Abs.ENot _ exp -> prPrec i 7 (concatD [doc (showString "!"), prt 8 exp])
    Func.Abs.ENeg _ exp -> prPrec i 6 (concatD [doc (showString "-"), prt 7 exp])
    Func.Abs.EEq _ exp1 exp2 -> prPrec i 5 (concatD [prt 6 exp1, doc (showString "=="), prt 6 exp2])
    Func.Abs.ELq _ exp1 exp2 -> prPrec i 5 (concatD [prt 6 exp1, doc (showString "<"), prt 6 exp2])
    Func.Abs.EGq _ exp1 exp2 -> prPrec i 5 (concatD [prt 6 exp1, doc (showString ">"), prt 6 exp2])
    Func.Abs.ELe _ exp1 exp2 -> prPrec i 5 (concatD [prt 6 exp1, doc (showString "<="), prt 6 exp2])
    Func.Abs.EGe _ exp1 exp2 -> prPrec i 5 (concatD [prt 6 exp1, doc (showString ">="), prt 6 exp2])
    Func.Abs.ENq _ exp1 exp2 -> prPrec i 5 (concatD [prt 6 exp1, doc (showString "!="), prt 6 exp2])
    Func.Abs.EMul _ exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "*"), prt 5 exp2])
    Func.Abs.EDiv _ exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "/"), prt 5 exp2])
    Func.Abs.EAdd _ exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "+"), prt 4 exp2])
    Func.Abs.ESub _ exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "-"), prt 4 exp2])
    Func.Abs.EList _ list -> prPrec i 2 (concatD [prt 0 list])
    Func.Abs.ECase _ exp cases -> prPrec i 1 (concatD [doc (showString "case"), prt 2 exp, doc (showString "of"), doc (showString "{"), prt 0 cases, doc (showString "}")])
    Func.Abs.ELambda _ type_ args exp -> prPrec i 1 (concatD [doc (showString "type"), prt 0 type_, doc (showString "\\"), prt 1 args, doc (showString "->"), prt 2 exp])
    Func.Abs.EIf _ exp1 exp2 exp3 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp1, doc (showString "then"), prt 0 exp2, doc (showString "else"), prt 0 exp3, doc (showString "endif")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Func.Abs.Case' a) where
  prt i = \case
    Func.Abs.Case _ arg exp -> prPrec i 0 (concatD [prt 0 arg, doc (showString "->"), prt 0 exp])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [Func.Abs.Case' a] where
  prt = prtList

instance Print (Func.Abs.List' a) where
  prt i = \case
    Func.Abs.LEmpty _ -> prPrec i 0 (concatD [doc (showString "[]")])
    Func.Abs.LCon _ exp1 exp2 -> prPrec i 0 (concatD [prt 6 exp1, doc (showString ":"), prt 6 exp2])
    Func.Abs.LSugar _ exps -> prPrec i 0 (concatD [doc (showString "["), prt 0 exps, doc (showString "]")])

instance Print [Func.Abs.Exp' a] where
  prt = prtList

